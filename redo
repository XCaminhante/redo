#!/bin/sh

# An implementation of djb's redo, written in bourne shell since everyone has that
# See cr.yp.to/redo.html for more about redo
#
# Written by Jeff Parent
# Released as Public Domain
# Version: 0.3.1
# Date: Fri Apr 15 00:26:30 CDT 2016

# Runtime Info
PROGNAME=$(basename "$0")
TARGETS=$@
METADIR=.redo

# Log Messages :: 1:Level, 2:Msg
msg_() {
  level_="$1: "
  shift
  case "$level_" in
    info*) level_=
  esac
  echo "${level_}$*" 1>&2
  case "$level_" in
    abort*) exit 111 ;;
  esac
}

# Get Extension from file name :: 1:Filename -> Extension
GetExtension() {
  target="$1"
  ext=$(echo "$target" | sed 's/.*\.//')

  if [ "$target" != "$ext" ]
  then
    echo "$ext"
  fi
}

# Get the opposite of the extension :: 1:Filename -> Base File Name
GetBase() {
  echo "$1" | sed 's/\(.*\)\..*/\1/'
}

# Clean old sums for a file :: 1:Dependency 2:Target
CleanChangeSum() {
  for a in $METADIR/$2/change/*
  do
    [ ! -e "$a" ] || [ "$(cat "$a")" != "$1" ] || rm "$a"
  done
}

CleanCreateSum() {
  for b in $METADIR/$2/create/*
  do
    [ ! -e "$b" ] || [ "$(cat "$b")" != "$1" ] || rm "$b"
  done
}

# Clean out all sums for a target :: 1:Target
CleanAll() {
 [ ! -d "$METADIR/$1" ] || rm -rf "$METADIR/$1/*"
}

# Get sum for dep :: 1:Dependency 2:Target -> Sum
GetChangeSum() {
  for c in $METADIR/$2/change/*
  do
    [ "$c" != "" ] || return
    if [ "$(cat "$c")" = "$1" ]
    then
      basename "$c"
      return
    fi
  done
}

# Check if dep matches its sum :: 1:Dependency 2:Target -> true/false
UpToDate() {
  retVal="false"
  NEWSUM=$(md5sum "$1" | cut -f1 -d' ')
  OLDSUM=""

  for d in $METADIR/$2/change/*
  do
    [ ! -e "$d" ] || [ "$(cat "$d")" != "$1" ] || OLDSUM="$(basename "$d")"
  done

  [ "$OLDSUM" != "$NEWSUM" ] || retVal="true"

  echo "$retVal"
}

# Get the correct do file for target :: 1:Target -> Do File
DoPath() {
  target="$1"
  if [ "$(GetExtension "$target")" = "do" ]
  then
    echo ""
  elif [ -e "$target.do" ]
  then
    echo "$target.do"
  elif [ -e "default.$(GetExtension "$target").do" ]
  then
    echo "default.$(GetExtension "$target").do"
  fi
}

# Generate Checksum :: 1:Dependency 2:Target
GenChangeSum() {
  sum=$(md5sum "$1" 2>/dev/null | cut -f1 -d' ')
  CleanChangeSum "$1" "$2"
  echo "$1" > "$METADIR/$2/change/$sum"
}

GenCreateSum() {
  sum=$(md5sum "$1" 2>/dev/null | cut -f1 -d' ')
  CleanCreateSum "$1" "$2"
  echo "$1" > "$METADIR/$2/create/$sum"
}

GetSheBang() {
  [ ! -e "$1" ] || echo "$(head -n 1 "$1" | grep "^#!" | sed 's/^#!//')"
}

# Build target if it needs a redo :: 1:target
DoRedo() {
  target="$1"
  tmp="$target---redoing"
  doPath="$(DoPath "$target")"

  [ -d "$METADIR/$target/change" ] || mkdir -p "$METADIR/$target/change/"
  [ -d "$METADIR/$target/create" ] || mkdir -p "$METADIR/$target/create/"

  if [ -z "$doPath" ]
  then
    if [ ! -e "$target" ]
    then
      msg_ "abort" "No .do file found for target: $target"
    fi
  else

    trigger=0

    # If do file changes
    [ "$(UpToDate "$doPath" "$target")" = "true" ] || trigger=1

    # If target file does not exist
    [ -e "$target" ] || trigger=1

    # Check if any creates exist
    if [ $trigger -ne 1 ]
    then
      for e in $METADIR/$target/create/*
      do
        if [ -e "$e" ]
        then
          dep="$(cat "$e")"
          if [ -e "$dep" ]
          then
            msg_ "abort" "$dep exists but should be created"
          else
            trigger=1
          fi
        fi
      done
    fi

    # If not triggering due to do file change (or lack of target)
    # do loop and possible rebuild target
    if [ $trigger -ne 1 ]
    then
      for f in $METADIR/$target/change/*
      do
        if [ -e "$f" ]
        then
          dep="$(cat "$f")"
          oldsum="$(basename "$f")"
          REDO_TARGET="$target" redo-ifchange "$dep"
          [ "$oldsum" = "$(GetChangeSum "$dep" "$target")" ] || trigger=1
        fi
      done
    fi

    if [ $trigger -eq 1 ]
    then
      msg_ "info" "redo $target"
      CleanAll "$target"
      GenChangeSum "$doPath" "$target"

      # Check if there is a #! on first line
      # If so run it instead of assuming /bin/sh
      cmd="$(GetSheBang "$doPath")"
      if [ "$cmd" = "" ]
      then
        PATH=.:$PATH REDO_TARGET="$target" sh -e "$doPath" 0 "$(GetBase "$target")" "$tmp" > "$tmp"
      else
        PATH=.:$PATH REDO_TARGET="$target" sh -c "$cmd  \"$doPath\" 0 \"$(GetBase "$target")\" \"$tmp\" > \"$tmp\""
      fi


      RC=$?
      if [ $RC -ne 0 ]
      then
        msg_ "error" "Redo script exited with a non-zero exit code: $RC"
        rm "$tmp"
        exit $RC
      else
        if [ "$(ls -s "$tmp" | cut -f1 -d' ')" = "0" ]
        then
          rm "$tmp"
        else
          mv "$tmp" "$target"
        fi
      fi
    fi
  fi
}


# Main
case "$PROGNAME" in
  redo-ifchange)
    [ "$REDO_TARGET" != "" ] || msg_ "abort" "REDO_TARGET not set"

    for target in $TARGETS
    do
      DoRedo "$target"
      [ "$(UpToDate "$target" "$REDO_TARGET")" = "true" ] || GenChangeSum "$target" "$REDO_TARGET"
    done
    ;;
  redo-ifcreate)
    [ "$REDO_TARGET" != "" ] || msg_ "abort" "REDO_TARGET not set"

    for target in $TARGETS
    do
      [ ! -e "$target" ] || msg_ "abort" "$target exists but should be created"

      DoRedo "$target"

      [ ! -e "$target" ] || GenCreateSum "$target" "$REDO_TARGET"
    done
    ;;
  *)
    for target in $TARGETS
    do
      REDO_TARGET="$target"
      DoRedo "$target"
    done
    ;;
esac
