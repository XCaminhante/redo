#!/bin/bash
#@+leo-ver=5-thin
#@+node:caminhante.20241004145243.1: * @file redo
#@@first
#@@language shell
#@@tabwidth -2
# An implementation of djb's redo, written in bash shell
# See cr.yp.to/redo.html for more about redo
# This work is placed in the Public Domain

PROGNAME="$(basename "$0")"
PROJECTROOT="$(pwd)"
METADIR="${PROJECTROOT}/.redo"
PARALLELJOBS=${PARALLELJOBS:=4}

#@+others
#@+node:caminhante.20241004145644.1: ** Msg
function Msg {
  local level="$1: "
  shift
  case "$level" in
    info) level=
  esac
  echo "${level}$*" 1>&2
  case "$level" in
    abort) exit 111 ;;
  esac
}
#@+node:caminhante.20241004145740.1: ** Basename
function Basename {
  echo "${1%%.*}"
}
#@+node:caminhante.20241004145733.1: ** Extension
function Extension {
  echo "${1#*.}"
}
#@+node:caminhante.20241004145728.1: ** TargetChangesFile
function TargetChangesFile {
  echo "${METADIR}/${1}/md5.sum"
}
#@+node:caminhante.20241004145721.1: ** TargetCreatesFile
function TargetCreatesFile {
  echo "${METADIR}/${1}/exists.txt"
}
#@+node:caminhante.20241004145710.1: ** AddIfChange
function AddIfChange {
  sed -i "\%${1}$% d" "$(TargetChangesFile "$2")"
  md5sum "$1" >> "$(TargetChangesFile "$2")"
}
#@+node:caminhante.20241004145705.1: ** AddIfCreate
function AddIfCreate {
  sed -i "\%${1}$% d" "$(targetCreatesFile "$2")"
  echo "$1" >> "$(targetCreatesFile "$2")"
}
#@+node:caminhante.20241005225255.1: ** DependencySum
function DependencySum {
  sed -r "\%${1}$% !d; s%(^.{32})  ${1}%\1%" "$(TargetChangesFile "$2")"
}
#@+node:caminhante.20241004181939.1: ** ClearMetadata
function ClearMetadata {
  echo -n > "$(TargetChangesFile "$1")"
  echo -n > "$(TargetCreatesFile "$1")"
}
#@+node:caminhante.20241004185656.1: ** InitializeMetadata
function InitializeMetadata {
  mkdir -p "${METADIR}/${1}"
  touch "$(TargetChangesFile "$1")" "$(TargetCreatesFile "$1")"
}
#@+node:caminhante.20241004145659.1: ** TargetChanged
function TargetChanged {
  ! md5sum --quiet --check "$(TargetChangesFile "$1")" >/dev/null 2>/dev/null || \
  ! grep -Eq "${1}$" "$(TargetChangesFile "$1")"
}
#@+node:caminhante.20241004145655.1: ** TargetCantCreate
function TargetCantCreate {
  ! xargs -a "$(TargetCreatesFile "$1")" -r -I% \[ ! -e "%" \]
}
#@+node:caminhante.20241004213342.1: ** TargetDependencies
function TargetDependencies {
  [ -f "$(TargetChangesFile "$1")" ] && \
    sed -r 's/^.{32}  //' "$(TargetChangesFile "$1")"
}
#@+node:caminhante.20241004214728.1: ** IsTarget
function IsTarget {
  local target="$1"
  local doPath="$(DoPath "$target")"
  [ ! -z "$doPath" ]
}
#@+node:caminhante.20241004174234.1: ** DoPath
function DoPath {
  if [ -e "${1}.do" ]; then
    echo "${1}.do"
  elif [ -e "$(dirname "$1")/default.$(Extension "$1").do" ]; then
    echo "$(dirname "$1")/default.$(Extension "$1").do"
  elif [ -e "${PROJECTROOT}/default.$(Extension "$1").do" ]; then
    echo "${PROJECTROOT}/default.$(Extension "$1").do"
  else
    echo ""
  fi
}
#@+node:caminhante.20241004201517.1: ** Rebuild
function Rebuild {
  local target="$1"
  local doPath="$2"
  local tmp="${target}--redoing"
  local RC=111
  Msg "info" "Redoing $target"
  ClearMetadata "$target"
  AddIfChange "$doPath" "$target"
  if [ -x "$doPath" ]; then
    REDO_TARGET="$target" "$doPath" 0 "$(Basename "$target")" "$tmp" > "$tmp"
  else
    REDO_TARGET="$target" sh -c '$0 $1 $2 $3' "$doPath" 0 "$(Basename "$target")" "$tmp" > "$tmp"
  fi
  RC=$?
  if [ $RC -ne 0 ]; then
    Msg "error" "Dofile exited with a non-zero exit code: $RC"
    rm -f "$tmp" "$target"
    exit $RC
  elif [ -s "$tmp" ]; then
    mv "$tmp" "$target"
    return 0
  else
    rm -f "$tmp" "$target"
    return 1
  fi
}
#@+node:caminhante.20241004200445.1: ** Redo
function Redo {
  local file="$1"
  local doPath="$(DoPath "$file")"
  local isTarget=true
  [ -z "$doPath" ] && isTarget=false
  if $isTarget; then
    InitializeMetadata "$file"
    if TargetCantCreate "$file"; then
      Msg "error" "The following files should be created by a dofile but already exist:"
      xargs -a "$(TargetCreatesFile "$file")" -r -I% find "%" 2>/dev/null
      exit 111
    fi
    TargetDependencies "$file" | ( while read dep; do
      if IsTarget "$dep" && [ "$dep" != "$file" ]; then
        # local oldSum="$(DependencySum "$dep" "$file")"
        # Msg "debug" "** oldsum $dep: $oldSum"
        REDO_TARGET="$file" Redo "$dep" &
        # local actualSum="$(md5sum "$dep" | sed -r 's/(^.{32}).*/\1/')"
        # Msg "debug" "** actual $dep: $actualSum"
        # if [ "$oldSum" != "$actualSum" ]; then
          # Msg "debug" "** dependency $dep changed"
        # fi
        while [ $(jobs -p | wc -l) -ge $PARALLELJOBS ]; do
          Msg "info" "waiting for $PARALLELJOBS processes"
          wait -n
        done
      fi
    done; wait; )
    if TargetChanged "$file"; then
      Rebuild "$file" "$doPath" && AddIfChange "$file" "$file"
    fi
  else
    if [ ! -e "$file" ]; then
      Msg "abort" "No dofile found for $file"
    else
      AddIfChange "$file" "$REDO_TARGET"
    fi
  fi
}
#@-others

case "$PROGNAME" in
redo-ifchange)
  [ -z "$REDO_TARGET" ] && Msg "abort" "REDO_TARGET not set"
  for dep; do
    dep="$(readlink -m "$dep")"
    Redo "$dep" && AddIfChange "$dep" "$REDO_TARGET"
  done
;;
redo-ifcreate)
  [ -z "$REDO_TARGET" ] && Msg "abort" "REDO_TARGET not set"
  for arg; do
    arg="$(readlink -m "$arg")"
    [ -e "$dep" ] && Msg "abort" "$dep exists but should be created by a dofile"
    Redo "$dep" && AddIfCreate "$dep" "$REDO_TARGET"
  done
;;
redo)
  for arg; do
    arg="$(readlink -m "$arg")"
    REDO_TARGET="$arg"
    Redo "$arg"
  done
;;
esac
#@-leo
